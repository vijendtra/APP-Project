package race;

import header.*;

import javax.swing.*;

import java.awt.*;
import java.awt.event.*;

public class Launch extends JPanel implements KeyListener, ActionListener {
	static JFrame frame;
	MapHandler m;
	RaceTypeFactory r2;
	RaceType r;

	static Opponent o;
	Graphics gt;
	boolean collision1 = false;
	boolean collision2 = false;
	static JPanel log;
	static JLabel playerlog;
	int lastpick = 0;
	static Launch l;
	int noOfMoves;
	int damage;
	int hp;

	boolean playerMove;
	boolean gotHit; 

	// String player="player stable";

	
	  public Launch(String s,String mapname) { 
		  m = new MapHandler(mapname, 20);
		m.findExits();

		r2 = new RaceTypeFactory(s);
		Items armor = new Items.Builder().hp(0).name("Leather").build();
		Items weapons = new Items.Builder().hp(0).name("LongSword").build();
		Items shield = new Items.Builder().hp(0).name("Buckler").build();

		r = r2.setup(s, true, armor, weapons, shield, "Bully", "Human");
		System.out.println(m.getPlayerX() + " " + m.getPlayerY());
		r.setPlayer(m.getPlayerX(), m.getPlayerY());
		o = new Opponent(m);
		o.setOpponent(m.getoX(), m.getoY());
		noOfMoves = 1;
		m.playerLvl = r.getLvl();
		o.setLvl(m.playerLvl);
		damage = 0;
		hp = 20;

		playerMove = false;
		gotHit = false;
	   go();}
	 

	/*public Launch() {
		m = new MapHandler("testmap.txt", 20);
		m.findExits();

		r2 = new RaceTypeFactory("Bully");
		Items armor = new Items.Builder().hp(0).name("Leather").build();
		Items weapons = new Items.Builder().hp(0).name("LongSword").build();
		Items shield = new Items.Builder().hp(0).name("Buckler").build();

		r = r2.setup("Vijender", true, armor, weapons, shield, "Bully", "Human");
		System.out.println(m.getPlayerX() + " " + m.getPlayerY());
		r.setPlayer(m.getPlayerX(), m.getPlayerY());
		o = new Opponent(m);
		o.setOpponent(m.getoX(), m.getoY());
		noOfMoves = 1;
		m.playerLvl = r.getLvl();
		o.setLvl(m.playerLvl);
		damage = 0;
		hp = 10;

		playerMove = false;
		gotHit = false;
		
	}*/

	public void paint(Graphics g) {
		Graphics2D gg = (Graphics2D) g;
		m.draw(gg);
		r.paint(gg);
		o.paint(gg);
		if (collision1)
			System.out.println("Collision1 one Done");
		if (collision2)
			System.out.println("Collision two  Done");

	}

	//public static void main(String[] args) {
		 public void go() {
		frame = new JFrame();

		//l = new Launch();
        
		log = new JPanel();

		log.setBounds(20, 500, 150, 150);
		playerlog = new JLabel("player is Stable");
		log.add(playerlog);
		frame.add(log);

		 frame.add(this);
		//frame.add(l);

		frame.setSize(1000, 700);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JPanel j = new JPanel();
		JButton jb = new JButton("Roll Dies");
		j.add(jb);
		frame.add(BorderLayout.EAST, j);
		frame.requestFocusInWindow();
		//jb.addActionListener(l);
		 jb.addActionListener(this);

	}

	@Override
	public void keyPressed(KeyEvent e) {

		int xArray = r.getX();
		int yArray = r.getY();

		if (e.getKeyCode() == KeyEvent.VK_UP) {

			xArray -= 1;

			noOfMoves++;
			System.out.println(noOfMoves);
			playerlog.setText("Player moved up");
			frame.repaint();
		}

		if (e.getKeyCode() == KeyEvent.VK_DOWN) {

			xArray += 1;

			noOfMoves++;
			System.out.println(noOfMoves);
			playerlog.setText("Player moved down");
			frame.repaint();

		}

		if (e.getKeyCode() == KeyEvent.VK_LEFT) {

			yArray -= 1;

			noOfMoves++;
			System.out.println(noOfMoves);
			playerlog.setText("Player moved left");
			frame.repaint();
		}

		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {

			yArray += 1;

			noOfMoves++;
			System.out.println(noOfMoves);
			playerlog.setText("Player moved right");
			frame.repaint();
		}

		if (e.getKeyCode() == 80) {
			playerlog.setText("Player collected an object");
			lastpick = m.map[xArray][yArray];
			m.map[xArray][yArray] = 1;
		}

		if (e.getKeyCode() == 68) {
			playerlog.setText("Player released last object collected");
			lastpick = m.map[xArray][yArray];
			m.map[xArray][yArray] = lastpick;
		}

		if (noOfMoves == 7) {
			frame.removeKeyListener(this);
			noOfMoves = 0;
			JOptionPane.showMessageDialog(null, "6 Moves completed");
			if (playerMove == true) {
				for (int i = 0; i < 6; i++) {
					if(!gotHit)
						o.move();
					else
						o.followPlayer(r.getX(), r.getY());
					collision2();
					paintImmediately(0, 0, 1000, 700);
					try {
						Thread.sleep(500);
					} catch (Exception ex) { }
				}
				playerMove = false;
			}
		} else {
			// System.out.println("xArray and yArray: " + xArray + " " +
			// yArray);
			if (!m.isBlack(xArray, yArray)) {

				r.setPlayer(xArray, yArray);

				// o.move();
				collision1();
				repaint();

			}

			else {
				playerlog.setText("player can't move");
				frame.repaint();
			}
		}

	}

	@Override
	public void keyReleased(KeyEvent e) {

	}

	@Override
	public void keyTyped(KeyEvent e) {

	}

	// when player attacks
	public void collision1() {

		Rectangle rectangle1 = r.bounds();
		Rectangle rectangle2 = o.bounds();
		
		if (rectangle1.contains(o.getY() * 20, o.getX() * 20)) {
			collision1 = true;
			int pattack = (int) (Math.ceil(Math.random() * 20))
					+ r.getAttackbonus();
			System.out.println("Player attacks: " + pattack);
			System.out.println("Opponent armorclass: " + o.getArmorclass());
			if (pattack > o.getArmorclass() || pattack == o.getArmorclass()) {
				if (r.getWeapon().getName().equals("LongSword"))
					damage = (int) (Math.ceil(Math.random() * 8))
							+ r.getStrengthmod();
				else
					damage = (int) (Math.ceil(Math.random() * 8));
				System.out.println("damage: " + damage);
				o.takeDamage(damage);
			}
			
			if (r.getHp() == 0 || r.getHp() < 0) {
				// if(hp == 0 || hp < 0){
				JOptionPane.showMessageDialog(null, "Player dead, Game Over");
				frame.dispose();
				frame.setVisible(false);
			}

			if (o.getHp() == 0 || o.getHp() < 0) {
				System.out.println("Opponent dead");
				o.setIsAlive(false);
				
				//Remove Roll Dice, Player can move freely
			}
			gotHit = true;

		} else {
			collision1 = false;

			// System.out.println("Player X: " + r.getX());
			// System.out.println("Player Y: " + r.getY());
		}
	}

	// when opponent attacks
	public void collision2() {

		Rectangle rectangle1 = r.bounds();
		Rectangle rectangle2 = o.bounds();
		
		if (rectangle2.contains(r.getY() * 20, r.getX() * 20)) {
			collision2 = true;
			int oattack = (int) (Math.ceil(Math.random() * 20))
					+ o.getAttackbonus();
			System.out.println("Opponent attacks: " + oattack);
			System.out.println("Player armorclass: " + r.getArmorclass());
			if (oattack > r.getArmorclass() || oattack == r.getArmorclass()) {
				if (o.getWeapon() == 1)
					damage = (int) (Math.ceil(Math.random() * 8))
							+ o.getStrengthmod();
				else
					damage = (int) (Math.ceil(Math.random() * 8));
				System.out.println("damage: " + damage);
				r.takeDamage(damage);
			}
			
			if (r.getHp() == 0 || r.getHp() < 0) {
				// if(hp == 0 || hp < 0){
				JOptionPane.showMessageDialog(null, "Player dead, Game Over");
				frame.dispose();
				frame.setVisible(false);
			}

			if (o.getHp() == 0 || o.getHp() < 0) {
				System.out.println("Opponent dead");
				o.setIsAlive(false);
				
				//Remove Roll Dice, Player can move freely
			}
			gotHit = true;

		} else {
			collision2 = false;

			// System.out.println("Player X: " + r.getX());
			// System.out.println("Player Y: " + r.getY());
		}
	}

	public void actionPerformed(ActionEvent arg0) {

		double p = r.iR();
		double q = o.iO();
		System.out.println(p);
		System.out.println(q);
		if (p > q) {

			noOfMoves = 0;
			playerMove = true;
			frame.requestFocusInWindow();

			//frame.addKeyListener(l);
			frame.addKeyListener(this);

		} else {

			for (int i = 0; i < 6; i++) {
				if(!gotHit)
					o.move();
				else
					o.followPlayer(r.getX(), r.getY());
				collision2();
				paintImmediately(0, 0, 1000, 700);
				try {
					Thread.sleep(500);
				} catch (Exception ex) {
				}
			}
			frame.requestFocusInWindow();

			//frame.addKeyListener(l);
			 frame.addKeyListener(this);
			repaint();


		}
	}

}
